#!/bin/sh

VERSION=20

. ./platform

SPLASH_DIR="/mnt/.splash"

EMMC_ROOTFS_MOUNT=/media/rootfs
EMMC_BOOT_MOUNT=/media/boot
EMMC_DATA_MOUNT=/media/data
EMMC_BOOT_MOUNT_IN_ROOTFS=$EMMC_ROOTFS_MOUNT$EMMC_BOOT_MOUNT
EMMC_DATA_MOUNT_IN_ROOTFS=$EMMC_ROOTFS_MOUNT$EMMC_DATA_MOUNT

SD_ROOTFS_MOUNT=/media/rootfs
SD_BOOT_MOUNT=/media/boot
SD_DATA_MOUNT=/media/data
SD_BOOT_MOUNT_IN_ROOTFS=$SD_ROOTFS_MOUNT$SD_BOOT_MOUNT
SD_DATA_MOUNT_IN_ROOTFS=$SD_ROOTFS_MOUNT$SD_DATA_MOUNT

speak() {
  if [ "$UPDATER_SPEECH" = "1" ]; then
    msg "speak $1"
    espeak "$1"
  fi
}

msg() {
  echo "$@" >/dev/console
}

# Prints information
msg_splash() {
  msg $1

  if [ "$splash_enabled" = 1 ]; then
    progress=$2

    if [ "$progress" = "" ]; then
      progress="0"
    fi

    TMPDIR=$SPLASH_DIR psplash-write "MSG $1"
    TMPDIR=$SPLASH_DIR psplash-write "PROGRESS $progress"
    usleep 500000
  fi
}

start_splash() {
  if [ -e /usr/bin/psplash ]; then
    splash_enabled=1
    # set up psplash
    mkdir -p "$SPLASH_DIR"
    mount tmpfs -t tmpfs $SPLASH_DIR -o,size=40k 2>&1 > /dev/console
    TMPDIR=$SPLASH_DIR psplash& 2>&1 > /dev/console
    sleep 1
  fi
}

# normal reboot does not work, so get a bigger hammer ...
restart() {
  echo "restarting system ..."
  sync
  umount -a
  reboot -f
}

initialize() {
  msg "============================================================"
  msg "Updater version $VERSION"
  mkdir -p /dev
  mkdir -p /sys
  mkdir -p /proc

  mount -t devtmpfs none /dev
  mount -t sysfs sysfs /sys
  mount -t proc proc /proc

  start_splash

  msg_splash "$TITLE v${VERSION}"
  msg_splash 10

  plat_init

  msg "Sleeping for 3 second(s) for USB flash to settle..."

  speak "updater version $VERSION"

  sleep 3

  mkdir -p $BOOT_MOUNT_POINT
  mkdir -p $DATA_MOUNT_POINT
}

partition_sd() {
  echo "starting ..." || return 1
  if [ -z "$1" ]; then
    DEVICE=$SD_DEVICE
  else
    DEVICE=$1
  fi
  umount ${DEVICE}p1 2>/dev/null
  umount ${DEVICE}p2 2>/dev/null
  umount ${DEVICE}p3 2>/dev/null

  DEVICE_SIZE=$(parted -s $DEVICE unit mb print | grep ^Disk | cut -d" " -f 3 | sed -e "s/MB//")
  if [ "$DEVICE_SIZE" = "" ] ; then
    parted -s $DEVICE mklabel msdos || return 1
    DEVICE_SIZE=$(parted -s $DEVICE unit mb print | grep ^Disk | cut -d" " -f 3 | sed -e "s/MB//")
  fi

  ROOTFS_START=$((BOOT_SIZE))
  ROOTFS_END=$((ROOTFS_START+ROOTFS_SIZE))
  DATAFS_SIZE=$((DEVICE_SIZE-BOOT_SIZE-ROOTFS_SIZE))
  DATAFS_START=$((ROOTFS_END))
  DATAFS_END=$((DATAFS_START+DATAFS_SIZE-4))

  echo "DEVICE_SIZE: $DEVICE_SIZE"
  echo "ROOTFS_SIZE: $ROOTFS_SIZE"
  echo "ROOTFS_START: $ROOTFS_START"
  echo "ROOTFS_END: $ROOTFS_END"
  echo "DATAFS_SIZE: $DATAFS_SIZE"
  echo "DATAFS_START: $DATAFS_START"
  echo "DATAFS_END: $DATAFS_END"

  dd if=/dev/zero of=$DEVICE bs=512 count=2 || return 1
  parted -s $DEVICE mklabel msdos || return 1
  parted -s $DEVICE mkpart primary 0% $BOOT_SIZE || return 1
  parted -s $DEVICE set 1 boot on || return 1
  parted -s $DEVICE mkpart primary $ROOTFS_START $ROOTFS_END || return 1
  parted -s $DEVICE mkpart primary $DATAFS_START $DATAFS_END || return 1

  echo "partition done"
  return 0
}

format_sd_boot() {
  mkfs.${BOOT_FSTYPE} -I -n "BOOT" $SD_BOOT_DEV || return 1
}

format_sd_rootfs() {
  mkfs.${FSTYPE} -O 64bit -L "ROOT" -F $SD_ROOTFS_DEV || return 1
}

format_sd_data() {
  mkfs.${FSTYPE} -O 64bit  -L "DATA" -F $SD_DATA_DEV || return 1
}

partition_emmc() {
  partition_sd $EMMC_DEVICE
}

format_emmc_boot() {
  mkfs.${BOOT_FSTYPE} -I -n "BOOT" $EMMC_BOOT_DEV || return 1
}

format_emmc_rootfs() {
  mkfs.${FSTYPE} -O 64bit  -L "ROOT" -F $EMMC_ROOTFS_DEV || return 1
}

format_emmc_data() {
  mkfs.${FSTYPE}  -O 64bit -L "DATA" -F $EMMC_DATA_DEV || return 1
}

mount_usb() {
  mkdir -p $USB_MOUNT_POINT

  if ! mount /dev/sda $USB_MOUNT_POINT 2>/dev/null; then
    if ! mount /dev/sda1 $USB_MOUNT_POINT 2>/dev/null; then
      msg_splash "No USB disk detected"
      return 1
    fi
  fi

  msg_splash "USB disk mounted"
  return 0
}

umount_usb() {
  if mount | grep usb; then
    umount $USB_MOUNT_POINT
  fi

  return 0
}

mount_sd() {
  mkdir -p $SD_MOUNT_POINT

  if ! mount $SD_BOOT_DEV $SD_MOUNT_POINT 2>/dev/null; then
    msg_splash "No SD card detected"
    return 1
  fi

  msg_splash "SD card mounted"
  return 0
}

umount_sd() {
  if mount | grep sd; then
    umount $SD_MOUNT_POINT
  fi

  return 0
}

mount_boot() {
  mount=$1
  device=$2
  mkdir -p $mount
  mount $device $mount 2>/dev/null || return 1
}

mount_data() {
  msg_splash "Mounting data partition"
  mount=$1
  device=$2
  mkdir -p $mount

  mount $device $mount 2>/dev/null || return 1
  mkdir -p $mount/log
}

mount_rootfs_sd() {
  if ! mount $SD_ROOTFS_DEV $ROOTFS_MOUNT_POINT 2>/dev/null; then
    msg_splash "Error mount SD rootfs, please fix ..."
    speak "updater, S D file system error"
    sleep 9999d
  fi

  mkdir -p $SD_BOOT_MOUNT_IN_ROOTFS
  mount --move /boot $SD_BOOT_MOUNT_IN_ROOTFS
}

mount_rootfs_emmc() {
  if ! mount $EMMC_ROOTFS_DEV $ROOTFS_MOUNT_POINT 2>/dev/null; then
    msg_splash "Error mount EMMC rootfs, please fix ..."
    speak "updater, E M M C file system error"
    sleep 9999d
  fi
  mount_data $EMMC_DATA_MOUNT $EMMC_DATA_DEV

  mkdir -p $EMMC_BOOT_MOUNT_IN_ROOTFS
  mount --move /boot $EMMC_BOOT_MOUNT_IN_ROOTFS
}

mount_rootfs_nand() {
    msg_splash "Boot from NAND not implemented ..."
}

process_update() {
  if ! tar -xvf $1; then
    msg_splash "Failed to extract update file"
    return 1
  fi

  if ! sha256sum -c update.sha256; then
    msg_splash "error in update file"
    return 1
  fi

  # check if EMMC card has 3 partitions, if not, partition it now
  total_emmc_partitions=$(grep -c "${EMMC_DEVICE}p[0-9]" /proc/partitions)
  if [ $total_emmc_partitions -ne 3 ]; then
    msg_splash "Partitioning storage, please wait ..."
    if ! partition_emmc; then
      msg_splash "EMMC Card partition failed, bad card"
      sleep 9999d
    fi
  fi

  if ! mount_boot $EMMC_BOOT_MOUNT $EMMC_BOOT_DEV; then
    msg_splash "Formatting BOOT partition"
    format_emmc_boot
    if ! mount_boot $EMMC_BOOT_MOUNT $EMMC_BOOT_DEV; then
      msg_splash "Failed to mount BOOT partition"
      return 1
    fi
  fi

  for f in $BOOT; do
    if [ -e $f ]; then
      if ! diff $f $EMMC_BOOT_MOUNT/$f; then
        msg_splash "Updating bootloader..."
        cp $f $EMMC_BOOT_MOUNT
        bootloader_updated=1
      fi
    fi
  done

  if [ -n "$bootloader_updated" ]; then
    msg_splash "bootloader updated"
  fi

  for f in $KERNEL; do
    if [ -e $f ]; then
      if ! diff $f $EMMC_BOOT_MOUNT/$f; then
        msg_splash "Updating kernel..."
        cp $f $EMMC_BOOT_MOUNT
        kernel_updated=1
      fi
    fi
  done

  umount $EMMC_BOOT_DEV

  if [ -e $ROOTFS ]; then
    msg_splash "Updating rootfs"
    format_emmc_rootfs
    mkdir -p $EMMC_ROOTFS_MOUNT
    if ! mount $EMMC_ROOTFS_DEV $EMMC_ROOTFS_MOUNT; then
      msg_splash "Failed to mount rootfs"
      return 1
    fi

    tar xf ${ROOTFS} -C $EMMC_ROOTFS_MOUNT
    umount $EMMC_ROOTFS_MOUNT
    msg_splash "rootfs update complete"
  fi

  return 0
}

# searches for update*.upd and update*.img files
# and then uses the newest version file it finds
# also supports the legacy update.img format for now

find_update_file() {
  DIR=$1
  cd $DIR
  extensions="upd img"
  update=""
  for ext in $extensions; do
    update=$(echo $(ls ${PLAT}*.${ext} -v -r 2>/dev/null) | sed "s/update.${ext}//" | sed "s/${ext}.*/${ext}/" | sed "s/^\s*//")
    if [ -n "${update}" ]; then
      echo $update
      break
    fi
  done

  if [ -z "${update}" ]; then
    if [ -e update.img ]; then
      echo update.img
    fi
  fi
  cd - >/dev/null
}

update_from_usb() {
  speak "updater, found u s b disk"
  update_file=$(find_update_file $USB_MOUNT_POINT)
  if echo $update_file | grep update; then
    msg_splash "USB update: $update_file"
    if ! process_update $USB_MOUNT_POINT/$update_file; then
      msg_splash "Failed to process update from USB"
      speak "updater, failed to process update from u s b"
      return 1
    else
      msg_splash "Update from USB complete"
      return 0
    fi
  fi

  return 1
}

update_from_sd() {
  speak "update found on S D card"
  update_file=$(find_update_file $SD_MOUNT_POINT)
  if echo $update_file | grep $PLAT; then
    msg_splash "SD update: $update_file"
    if ! process_update $SD_MOUNT_POINT/$update_file; then
      msg_splash "Failed to process update from SD"
      speak "updater, failed to process update from s d card"
      return 1
    else
      msg_splash "Update from SD complete"
      return 0
    fi
  fi
}

update_from_data() {
  speak "update found on data partition"
  mount_data $DATA_MOUNT_POINT $EMMC_DATA_DEV
  return 0
}

update() {
  # update precedence usb, SD, data partition
  msg "checking usb ..."
  if ! (mount_usb && update_from_usb); then
    msg "checking sd ..."
    if ! (mount_sd && update_from_sd); then
      msg "checking data ..."
      update_from_data
    fi
  fi
}

boot() {
  mkdir -p $ROOTFS_MOUNT_POINT

  if [ -e $EMMC_BOOT_DEV ]; then
    msg_splash "Booting from EMMC ..."
    speak "booting system from E M M C"
    mount_rootfs_emmc
  else
    msg_splash "Booting from SD ..."
    speak "booting system from S D"
    mount_rootfs_sd
  fi

  umount_usb
  umount_sd

  msg_splash "Moving filesystems into rootfs..."
  mkdir -p $ROOTFS_MOUNT_POINT/media/data
  mount --move /data $ROOTFS_MOUNT_POINT/media/data
  mount --move /dev $ROOTFS_MOUNT_POINT/dev
  mount --move /proc $ROOTFS_MOUNT_POINT/proc
  mount --move /sys $ROOTFS_MOUNT_POINT/sys

  msg_splash "switching to main filesystem"
  msg_splash 50

  exec switch_root -c /dev/console $ROOTFS_MOUNT_POINT /sbin/init 5
}

initialize
update
boot
